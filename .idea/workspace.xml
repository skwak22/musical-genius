<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="a31e9ceb-39ba-4bd1-ba42-10d5194626ac" name="Default Changelist" comment="">
      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/musical_genius/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/musical_genius/core.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/musical_genius/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="281">
              <caret line="86" column="28" lean-forward="true" selection-start-line="86" selection-start-column="28" selection-end-line="86" selection-end-column="28" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="153">
              <caret line="9" selection-start-line="9" selection-end-line="9" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/musical_genius/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="1907" />
    <option name="y" value="2" />
    <option name="width" value="1945" />
    <option name="height" value="1053" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="musical-genius" type="b2602c69:ProjectViewProjectNode" />
              <item name="musical-genius" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="musical-genius" type="b2602c69:ProjectViewProjectNode" />
              <item name="musical-genius" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="musical-genius" type="b2602c69:ProjectViewProjectNode" />
              <item name="musical-genius" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="musical_genius" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1590799727434" />
  </component>
  <component name="ReplState" timestamp="1590799719016">{:repl-history {:ide [], :local [{:command &quot;(defn generate-measure [measure-length]\n      (loop [i 0\n             j 0\n             result []]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (conj result i)\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               :default)\n                         (inc j)))))&quot;, :offset 390, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measure [measure-length]\n      (loop [i 0\n             j 0\n             result []]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (conj result i)\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                         (inc j)))))&quot;, :offset 386, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-measure 4)&quot;, :offset 20, :ns &quot;musical-genius.core&quot;} {:command &quot;(&gt; (rand) 0.5)&quot;, :offset 14, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measures [measure-length]\n      (loop [i 0\n             j 0\n             result []]\n            (conj result i)\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                         (inc j)))))&quot;, :offset 375, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measures [measure-length]\n      (loop [i 0\n             j 0\n             result []]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (conj result i)\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                         (inc j)))))&quot;, :offset 387, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measures [measure-length]\n      (loop [i 0\n             j 0\n             result []]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (vec (conj result i))\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                         (inc j)))))&quot;, :offset 393, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measures [measure-length]\n      (loop [i 0\n             j 0\n             result [0]]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (vec (conj result i))\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                         (inc j)))))&quot;, :offset 394, :ns &quot;musical-genius.core&quot;} {:command &quot;(conj )&quot;, :offset 7} {:command &quot;(defn generate-measures [measure-length]\n      (loop [i 0\n             j 0]\n            (let [result []]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (vec (conj result i))\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                         (inc j))))))&quot;, :offset 400, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measures [measure-length]\n      (let [result []]\n      (loop [i 0\n             j 0]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (vec (conj result i))\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                         (inc j))))))&quot;, :offset 394, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measures [measure-length]\n      (let [result []]\n      (loop [i 0\n             j 0]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (conj result i)\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                         (inc j))))))&quot;, :offset 388, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measures [measure-length]\n      (let [result []]\n      (loop [i 0\n             j 0]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                        (conj result i)(inc j))))))&quot;, :offset 362, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measures [measure-length]\n      (let [result []]\n      (loop [i 0\n             j 0]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (do\n                        (conj result i)\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do)))\n                         (inc j))))))&quot;, :offset 417, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-measures 7)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-measures 6)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-measures 4)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measures [measure-length]\n      (let [result []]\n      (loop [i 0\n             j 0]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (do\n                        (conj result i)\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                         (inc j)))))))&quot;, :offset 417, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-measures [measure-length]\n      (let [result []\n            i 0]\n      (loop [j 0]\n            (if (= j (- measure-length 1))\n                  result\n                  (recur\n                        (do\n                        (conj result i)\n                        (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))\n                         (inc j)))))))&quot;, :offset 416, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-measures 1)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-measures 2)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-measures 3)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn test [measure-length]\n      (let [vec []\n            i 0]\n      (loop [j 0]\n            (when (&lt; j measure-length)\n                  (conj vec i)\n                  (if (&gt; (rand) 0.5)\n                        (inc i)\n                        (do))\n                  (recur (inc j))))))&quot;, :offset 288, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn test1 [measure-length]\n      (let [vec []\n            i 0]\n      (loop [j 0]\n            (when (&lt; j measure-length)\n                  (conj vec i)\n                  (if (&gt; (rand) 0.5)\n                        (inc i)\n                        (do))\n                  (recur (inc j))))))&quot;, :offset 289, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn test1 [measure-length]\n      (let [vec []\n            i 0]\n      (loop [j 0]\n            (when (&lt; j measure-length)\n                  (conj vec i)\n                  (if (&gt; (rand) 0.5)\n                        (inc i)\n                        (do))\n                  (recur (inc j))))\n      vec))&quot;, :offset 299, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn test1 [measure-length]\n      (let [vec []\n            i 0]\n      (loop [j 0]\n            (when (&lt; j measure-length)\n                  (do (conj vec i)\n                  (if (&gt; (rand) 0.5)\n                        (inc i)\n                        (do)))\n                  (recur (inc j))))\n      vec))&quot;, :offset 304, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn test1 [measure-length]\n      (let [vec [0]\n            i 0]\n      (loop [j 0]\n            (when (&lt; j measure-length)\n                  (do (conj vec i)\n                  (if (&gt; (rand) 0.5)\n                        (inc i)\n                        (do)))\n                  (recur (inc j))))\n      vec))&quot;, :offset 305, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn test1 [measure-length]\n      (loop [j 0\n             vec [] \n             i 0]\n            (if (&gt; j measure-length)\n                  vec\n                  (recur (inc j)\n                         (conj vec i)\n                         (if (&gt; (rand) 0.5)\n                               (inc i)\n                               (do))))))&quot;, :offset 338, :ns &quot;musical-genius.core&quot;} {:command &quot;(test1 2)&quot;, :offset 9, :ns &quot;musical-genius.core&quot;} {:command &quot;(test1 4)&quot;, :offset 9, :ns &quot;musical-genius.core&quot;} {:command &quot;(take 32 #(repeatedly 32))&quot;, :offset 26, :ns &quot;musical-genius.core&quot;} {:command &quot;(take 32 (repeatedly #(rand-int 32)))&quot;, :offset 37, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn measure-template [num]\n      (take num (repeatedly #(rand-int num))))&quot;, :offset 75, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn measure-template [num]\n      (sort (take num (repeatedly #(rand-int num)))))&quot;, :offset 82, :ns &quot;musical-genius.core&quot;} {:command &quot;(measure-template 32)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(measure-template 16)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-lengths [num]\n      (let [template (measure-template num)]\n            (frequencies template)))&quot;, :offset 110, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-lengths [num]\n      (let [template (measure-template num)]\n            (map #(second %1) (frequencies template))))&quot;, :offset 129, :ns &quot;musical-genius.core&quot;} {:command &quot;(reduce + (2 1 1 1 1 2 1 1 1 3 2))&quot;, :offset 34, :ns &quot;musical-genius.core&quot;} {:command &quot;(reduce + '(2 1 1 1 1 2 1 1 1 3 2))&quot;, :offset 35, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-lengths 16)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-lengths [num]\n      (let [template (measure-template num)]\n            (mapv #(second %1) (frequencies template))))&quot;, :offset 130, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-lengths 8)&quot;, :offset 20, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-notes [num]\n      (vec (take num (repeatedly #(rand-nth notes)))))&quot;, :offset 81, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-notes 4)&quot;, :offset 18, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-pitch [num]\n      (vec (take num (repeatedly #(rand-nth pitch)))))&quot;, :offset 81, :ns &quot;musical-genius.core&quot;} {:command &quot;(def pitch\n      '(\&quot;+2\&quot; \&quot;+1\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;-1\&quot; \&quot;-2\&quot;))&quot;, :offset 58, :ns &quot;musical-genius.core&quot;} {:command &quot;(def pitch\n      '(\&quot;+2\&quot; \&quot;+1\&quot; \&quot;+1\&quot; \&quot;+1\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;-1\&quot; \&quot;-1\&quot; \&quot;-1\&quot; \&quot;-2\&quot;))&quot;, :offset 78, :ns &quot;musical-genius.core&quot;} {:command &quot;(def pitch\n      '(\&quot;+2\&quot; \&quot;+1\&quot; \&quot;+1\&quot; \&quot;+1\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;-1\&quot; \&quot;-1\&quot; \&quot;-1\&quot; \&quot;-2\&quot;))&quot;, :offset 96, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-pitch 4)&quot;, :offset 18, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-genome []\n      (let [lengths (generate-lengths 8)]\n            {:lengths lengths\n             :notes (generate-notes (count lengths))\n             :pitches (generate-pitch (count lengths))}))&quot;, :offset 202, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-lengths [num]\n      (let [template (measure-template num)]\n            (mapv #(/ (second %1) num) (frequencies template))))&quot;, :offset 138, :ns &quot;musical-genius.core&quot;} {:command &quot;(def notes\n      '(:c :c# :d :d# :e :f :f# :g :g# :a :a# :b :rest))&quot;, :offset 67, :ns &quot;musical-genius.core&quot;} {:command &quot;(new-genome)&quot;, :offset 12, :ns &quot;musical-genius.core&quot;} {:command &quot;(example-individual)&quot;, :offset 20, :ns &quot;musical-genius.core&quot;} {:command &quot;(def notes\n      '(c c# d d# e f f# g g# a a# b r))&quot;, :offset 51, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n      (let [lengths (generate-lengths 8)]\n            {:lengths lengths\n             :notes (generate-notes (count lengths))\n             :pitches (generate-pitch (count lengths))}))&quot;, :offset 206, :ns &quot;musical-genius.core&quot;} {:command &quot;(example-individual :lengths)&quot;, :offset 29, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn translate-notes [length note pitch]\n      (str length \&quot; :\&quot; pitch note))&quot;, :offset 77, :ns &quot;musical-genius.core&quot;} {:command &quot;(translate-notes \&quot;1/16\&quot; \&quot;c\&quot; \&quot;-\&quot;)&quot;, :offset 32, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n      (let [lengths (generate-lengths 8)]\n            {:lengths lengths\n             :notes (generate-notes (count lengths))\n             :pitches (generate-pitch (count lengths))\n             :finalnotes (map #(translate-notes %1 %2 %3) :lengths :notes :pitches)}))&quot;, :offset 290, :ns &quot;musical-genius.core&quot;} {:command &quot;(new-individual\n  )&quot;, :offset 19, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n      (let [lengths (generate-lengths 8)]\n            {:lengths lengths\n             :notes (generate-notes (count lengths))\n             :pitches (generate-pitch (count lengths))\n             :finalnotes (map #(translate-notes %1 %1 %1) lengths)}))&quot;, :offset 273, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn translate-notes [length note pitch]\n      (str length \&quot; :\&quot; pitch note \&quot; \&quot;))&quot;, :offset 81, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n      (let [lengths (generate-lengths 8)\n            notes (generate-notes (count lengths))\n            pitches (generate-pitch (count lengths))]\n            {:lengths lengths\n             :notes notes\n             :pitches pitches\n             :finalnotes (map #(translate-notes %1 %2 %3) lengths notes pitches)}))&quot;, :offset 339, :ns &quot;musical-genius.core&quot;} {:command &quot;(def example-individual (new-individual))&quot;, :offset 41, :ns &quot;musical-genius.core&quot;} {:command &quot;example-individual&quot;, :offset 18, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n      (let [lengths (generate-lengths 8)\n            notes (generate-notes (count lengths))\n            pitches (generate-pitch (count lengths))]\n            {:lengths lengths\n             :notes notes\n             :pitches pitches\n             :finalnotes (mapv #(translate-notes %1 %2 %3) lengths notes pitches)}))&quot;, :offset 340, :ns &quot;musical-genius.core&quot;} {:command &quot;(new-individual)&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(finess example-individual)&quot;, :offset 27, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn fitness [individual]\n      (reduce + '((notes-fitness (individual :notes)) (pitch-fitness :pitches) (length-fitness :lengths))))&quot;, :offset 134, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn fitness [individual]\n      (reduce + '((notes-fitness (individual :notes)) (pitch-fitness (individual :pitches) (length-fitness (individual :lengths))))))&quot;, :offset 160, :ns &quot;musical-genius.core&quot;} {:command &quot;(fitness example-individual)&quot;, :offset 28, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn rotate [x] \n      (cons (last x) (drop-last x)))&quot;, :offset 54, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn rotate [x]\n      (vec (cons (last x) (drop-last x))))&quot;, :offset 59, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate [1 2 3])&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(repeatedly 2 #(rotate [1 2 3]))&quot;, :offset 32, :ns &quot;musical-genius.core&quot;} {:command &quot;(repeatedly 4 #(rotate [1 2 3]))&quot;, :offset 32, :ns &quot;musical-genius.core&quot;} {:command &quot;(apply (rotate [1 2 3]))&quot;, :offset 24, :ns &quot;musical-genius.core&quot;} {:command &quot;(apply rotate [1 2 3])\n&quot;, :offset 22, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate [1 2 3])\n&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate (rotate [1 2 3]))\n&quot;, :offset 25, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn rotate2 [v n]\n      (let [cv (count v), n (mod n cv)]\n            (concat (subvec v n cv) (subvec v 0 n))))&quot;, :offset 113, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn rotate [v n]\n      (let [cv (count v), n (mod n cv)]\n            (vec (concat (subvec v n cv) (subvec v 0 n)))))&quot;, :offset 118, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate2 [1 2 3 4 5 6] 3)&quot;, :offset 25, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-key [position]\n      \&quot;Rotate the major scale to fit the key \n      For reference: C is 0, C#/Db is 1, etc\&quot;\n      (rotate major-scale position))&quot;, :offset 158, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn rotate [v n]\n      (let [cv (count v), n (mod n cv)]\n            (concat (subvec v n cv) (subvec v 0 n))))&quot;, :offset 112, :ns &quot;musical-genius.core&quot;} {:command &quot;(def major-scale\n      '(1 0 1 0 1 1 0 1 0 1 0 1))&quot;, :offset 50, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-key [position]\n      \&quot;Rotate the major scale to fit the key \n      For reference: C is 0, C#/Db is 1, etc\&quot;\n      (vec (rotate major-scale position)))&quot;, :offset 164, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-key 3)&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate major-scale 3)&quot;, :offset 22, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate [1 2 3] 3)&quot;, :offset 18, :ns &quot;musical-genius.core&quot;} {:command &quot;(def major-scale\n      [1 0 1 0 1 1 0 1 0 1 0 1])&quot;, :offset 49, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-key [position]\n      \&quot;Rotate the major scale to fit the key\n      For reference: C is 0, C#/Db is 1, etc\&quot;\n      (rotate major-scale position))&quot;, :offset 157, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-key 4)&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-key [position]\n      \&quot;Rotate the major scale to fit the key\n      For reference: C is 0, C#/Db is 1, etc\&quot;\n      (vec (rotate major-scale position)))&quot;, :offset 163, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-key 6)&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-key-sig [position]\n      \&quot;Rotate the major scale to fit the key\n      For reference: C is 0, C#/Db is 1, etc\&quot;\n      (vec (rotate major-scale position)))&quot;, :offset 167, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn length-fitness [length]\n      (frequencies length))&quot;, :offset 57, :ns &quot;musical-genius.core&quot;} {:command &quot;(length-fitness [1/2 1/2 1/2])&quot;, :offset 30, :ns &quot;musical-genius.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL for musical-genius" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="musical-genius" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for musical-genius" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="a31e9ceb-39ba-4bd1-ba42-10d5194626ac" name="Default Changelist" comment="" />
      <created>1590735821707</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1590735821707</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-6" y="-6" width="1549" height="837" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info id="Image Layers" />
      <window_info id="Designer" />
      <window_info id="UI Designer" />
      <window_info id="Capture Tool" />
      <window_info id="Favorites" side_tool="true" />
      <window_info content_ui="combo" id="Project" order="0" weight="0.24965326" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info anchor="bottom" id="Version Control" />
      <window_info anchor="bottom" id="Terminal" sideWeight="0.49899396" visible="true" weight="0.32673267" />
      <window_info anchor="bottom" id="Event Log" sideWeight="0.501006" side_tool="true" weight="0.32673267" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="right" id="Palette" />
      <window_info active="true" anchor="right" x="5207" y="436" width="522" height="472" id="REPL" side_tool="true" type="WINDOWED" visible="true" weight="0.35278335" />
      <window_info anchor="right" id="Theme Preview" />
      <window_info anchor="right" id="Maven" />
      <window_info anchor="right" id="Leiningen" />
      <window_info anchor="right" id="Capture Analysis" />
      <window_info anchor="right" id="Palette&#9;" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="153">
          <caret line="9" selection-start-line="9" selection-end-line="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/musical_genius/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="281">
          <caret line="86" column="28" lean-forward="true" selection-start-line="86" selection-start-column="28" selection-end-line="86" selection-end-column="28" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>12</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>