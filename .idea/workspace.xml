<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="a31e9ceb-39ba-4bd1-ba42-10d5194626ac" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/native/macosx/x86_64/libscsynth.dylib" beforeDir="false" afterPath="$PROJECT_DIR$/native/macosx/x86_64/libscsynth.dylib" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/musical_genius/core.clj" beforeDir="false" afterPath="$PROJECT_DIR$/src/musical_genius/core.clj" afterDir="false" />
    </list>
    <ignored path="$PROJECT_DIR$/out/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/musical_genius/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="349">
              <caret line="189" column="16" selection-start-line="189" selection-start-column="16" selection-end-line="189" selection-end-column="16" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="85">
              <caret line="5" column="47" selection-start-line="5" selection-start-column="47" selection-end-line="5" selection-end-column="47" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>null</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/musical_genius/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="-15" />
    <option name="y" value="-15" />
    <option name="width" value="1950" />
    <option name="height" value="2075" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="musical-genius" type="b2602c69:ProjectViewProjectNode" />
              <item name="musical-genius" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="musical-genius" type="b2602c69:ProjectViewProjectNode" />
              <item name="musical-genius" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="musical-genius" type="b2602c69:ProjectViewProjectNode" />
              <item name="musical-genius" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="musical_genius" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToKeyword.includeLibraries" value="false" />
    <property name="GoToNamespace.includeLibraries" value="false" />
    <property name="com.android.tools.idea.instantapp.provision.ProvisionBeforeRunTaskProvider.myTimeStamp" value="1590839738342" />
    <property name="project.structure.last.edited" value="Global Libraries" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.2" />
  </component>
  <component name="ReplState" timestamp="1590926811619">{:repl-history {:ide [], :local [{:command &quot;(defn measure-template [num]\n      (take num (repeatedly #(rand-int num))))&quot;, :offset 75, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn measure-template [num]\n      (sort (take num (repeatedly #(rand-int num)))))&quot;, :offset 82, :ns &quot;musical-genius.core&quot;} {:command &quot;(measure-template 32)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(measure-template 16)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-lengths [num]\n      (let [template (measure-template num)]\n            (frequencies template)))&quot;, :offset 110, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-lengths [num]\n      (let [template (measure-template num)]\n            (map #(second %1) (frequencies template))))&quot;, :offset 129, :ns &quot;musical-genius.core&quot;} {:command &quot;(reduce + (2 1 1 1 1 2 1 1 1 3 2))&quot;, :offset 34, :ns &quot;musical-genius.core&quot;} {:command &quot;(reduce + '(2 1 1 1 1 2 1 1 1 3 2))&quot;, :offset 35, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-lengths 16)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-lengths [num]\n      (let [template (measure-template num)]\n            (mapv #(second %1) (frequencies template))))&quot;, :offset 130, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-notes [num]\n      (vec (take num (repeatedly #(rand-nth notes)))))&quot;, :offset 81, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-notes 4)&quot;, :offset 18, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-pitch [num]\n      (vec (take num (repeatedly #(rand-nth pitch)))))&quot;, :offset 81, :ns &quot;musical-genius.core&quot;} {:command &quot;(def pitch\n      '(\&quot;+2\&quot; \&quot;+1\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;-1\&quot; \&quot;-2\&quot;))&quot;, :offset 58, :ns &quot;musical-genius.core&quot;} {:command &quot;(def pitch\n      '(\&quot;+2\&quot; \&quot;+1\&quot; \&quot;+1\&quot; \&quot;+1\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;-1\&quot; \&quot;-1\&quot; \&quot;-1\&quot; \&quot;-2\&quot;))&quot;, :offset 78, :ns &quot;musical-genius.core&quot;} {:command &quot;(def pitch\n      '(\&quot;+2\&quot; \&quot;+1\&quot; \&quot;+1\&quot; \&quot;+1\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;-1\&quot; \&quot;-1\&quot; \&quot;-1\&quot; \&quot;-2\&quot;))&quot;, :offset 96, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-pitch 4)&quot;, :offset 18, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-genome []\n      (let [lengths (generate-lengths 8)]\n            {:lengths lengths\n             :notes (generate-notes (count lengths))\n             :pitches (generate-pitch (count lengths))}))&quot;, :offset 202, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-lengths [num]\n      (let [template (measure-template num)]\n            (mapv #(/ (second %1) num) (frequencies template))))&quot;, :offset 138, :ns &quot;musical-genius.core&quot;} {:command &quot;(def notes\n      '(:c :c# :d :d# :e :f :f# :g :g# :a :a# :b :rest))&quot;, :offset 67, :ns &quot;musical-genius.core&quot;} {:command &quot;(new-genome)&quot;, :offset 12, :ns &quot;musical-genius.core&quot;} {:command &quot;(example-individual)&quot;, :offset 20, :ns &quot;musical-genius.core&quot;} {:command &quot;(def notes\n      '(c c# d d# e f f# g g# a a# b r))&quot;, :offset 51, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n      (let [lengths (generate-lengths 8)]\n            {:lengths lengths\n             :notes (generate-notes (count lengths))\n             :pitches (generate-pitch (count lengths))}))&quot;, :offset 206, :ns &quot;musical-genius.core&quot;} {:command &quot;(example-individual :lengths)&quot;, :offset 29, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn translate-notes [length note pitch]\n      (str length \&quot; :\&quot; pitch note))&quot;, :offset 77, :ns &quot;musical-genius.core&quot;} {:command &quot;(translate-notes \&quot;1/16\&quot; \&quot;c\&quot; \&quot;-\&quot;)&quot;, :offset 32, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n      (let [lengths (generate-lengths 8)]\n            {:lengths lengths\n             :notes (generate-notes (count lengths))\n             :pitches (generate-pitch (count lengths))\n             :finalnotes (map #(translate-notes %1 %2 %3) :lengths :notes :pitches)}))&quot;, :offset 290, :ns &quot;musical-genius.core&quot;} {:command &quot;(new-individual\n  )&quot;, :offset 19, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n      (let [lengths (generate-lengths 8)]\n            {:lengths lengths\n             :notes (generate-notes (count lengths))\n             :pitches (generate-pitch (count lengths))\n             :finalnotes (map #(translate-notes %1 %1 %1) lengths)}))&quot;, :offset 273, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn translate-notes [length note pitch]\n      (str length \&quot; :\&quot; pitch note \&quot; \&quot;))&quot;, :offset 81, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n      (let [lengths (generate-lengths 8)\n            notes (generate-notes (count lengths))\n            pitches (generate-pitch (count lengths))]\n            {:lengths lengths\n             :notes notes\n             :pitches pitches\n             :finalnotes (map #(translate-notes %1 %2 %3) lengths notes pitches)}))&quot;, :offset 339, :ns &quot;musical-genius.core&quot;} {:command &quot;(def example-individual (new-individual))&quot;, :offset 41, :ns &quot;musical-genius.core&quot;} {:command &quot;example-individual&quot;, :offset 18, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n      (let [lengths (generate-lengths 8)\n            notes (generate-notes (count lengths))\n            pitches (generate-pitch (count lengths))]\n            {:lengths lengths\n             :notes notes\n             :pitches pitches\n             :finalnotes (mapv #(translate-notes %1 %2 %3) lengths notes pitches)}))&quot;, :offset 340, :ns &quot;musical-genius.core&quot;} {:command &quot;(new-individual)&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(finess example-individual)&quot;, :offset 27, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn fitness [individual]\n      (reduce + '((notes-fitness (individual :notes)) (pitch-fitness :pitches) (length-fitness :lengths))))&quot;, :offset 134, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn fitness [individual]\n      (reduce + '((notes-fitness (individual :notes)) (pitch-fitness (individual :pitches) (length-fitness (individual :lengths))))))&quot;, :offset 160, :ns &quot;musical-genius.core&quot;} {:command &quot;(fitness example-individual)&quot;, :offset 28, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn rotate [x] \n      (cons (last x) (drop-last x)))&quot;, :offset 54, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn rotate [x]\n      (vec (cons (last x) (drop-last x))))&quot;, :offset 59, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate [1 2 3])&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(repeatedly 2 #(rotate [1 2 3]))&quot;, :offset 32, :ns &quot;musical-genius.core&quot;} {:command &quot;(repeatedly 4 #(rotate [1 2 3]))&quot;, :offset 32, :ns &quot;musical-genius.core&quot;} {:command &quot;(apply (rotate [1 2 3]))&quot;, :offset 24, :ns &quot;musical-genius.core&quot;} {:command &quot;(apply rotate [1 2 3])\n&quot;, :offset 22, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate [1 2 3])\n&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate (rotate [1 2 3]))\n&quot;, :offset 25, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn rotate2 [v n]\n      (let [cv (count v), n (mod n cv)]\n            (concat (subvec v n cv) (subvec v 0 n))))&quot;, :offset 113, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn rotate [v n]\n      (let [cv (count v), n (mod n cv)]\n            (vec (concat (subvec v n cv) (subvec v 0 n)))))&quot;, :offset 118, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate2 [1 2 3 4 5 6] 3)&quot;, :offset 25, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-key [position]\n      \&quot;Rotate the major scale to fit the key \n      For reference: C is 0, C#/Db is 1, etc\&quot;\n      (rotate major-scale position))&quot;, :offset 158, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn rotate [v n]\n      (let [cv (count v), n (mod n cv)]\n            (concat (subvec v n cv) (subvec v 0 n))))&quot;, :offset 112, :ns &quot;musical-genius.core&quot;} {:command &quot;(def major-scale\n      '(1 0 1 0 1 1 0 1 0 1 0 1))&quot;, :offset 50, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-key [position]\n      \&quot;Rotate the major scale to fit the key \n      For reference: C is 0, C#/Db is 1, etc\&quot;\n      (vec (rotate major-scale position)))&quot;, :offset 164, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-key 3)&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate major-scale 3)&quot;, :offset 22, :ns &quot;musical-genius.core&quot;} {:command &quot;(rotate [1 2 3] 3)&quot;, :offset 18, :ns &quot;musical-genius.core&quot;} {:command &quot;(def major-scale\n      [1 0 1 0 1 1 0 1 0 1 0 1])&quot;, :offset 49, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-key [position]\n      \&quot;Rotate the major scale to fit the key\n      For reference: C is 0, C#/Db is 1, etc\&quot;\n      (rotate major-scale position))&quot;, :offset 157, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-key 4)&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-key [position]\n      \&quot;Rotate the major scale to fit the key\n      For reference: C is 0, C#/Db is 1, etc\&quot;\n      (vec (rotate major-scale position)))&quot;, :offset 163, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-key 6)&quot;, :offset 16, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn generate-key-sig [position]\n      \&quot;Rotate the major scale to fit the key\n      For reference: C is 0, C#/Db is 1, etc\&quot;\n      (vec (rotate major-scale position)))&quot;, :offset 167, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn length-fitness [length]\n      (frequencies length))&quot;, :offset 57, :ns &quot;musical-genius.core&quot;} {:command &quot;(length-fitness [1/2 1/2 1/2])&quot;, :offset 30, :ns &quot;musical-genius.core&quot;} {:command &quot;(ns musical-genius.core)\n\n(def what-key\n  \&quot;Set the key of your music generator\&quot;\n  :f#)\n\n(def notes\n  '(:c :c# :d :d# :e :f :f# :g :g# :a :a# :b))\n\n(def note-map-sans-r\n  {1 :c, 2 :c#, 3 :d, 4 :d#, 5 :e, 6 :f, 7 :f#, 8 :g, 9 :g#, 10 :a, 11 :a#, 12 :b})\n\n(def note-map\n  {0 :r, 1 :c, 2 :c#, 3 :d, 4 :d#, 5 :e, 6 :f, 7 :f#, 8 :g, 9 :g#, 10 :a, 11 :a#, 12 :b})\n\n(def note-vals-sans-r\n  {:c 1, :c# 2, :d 3, :d# 4, :e 5, :f 6, :f# 7, :g 8, :g# 9, :a 10, :a# 11, :b 12})\n\n(def note-vals\n  {:r 0, :c 1, :c# 2, :d 3, :d# 4, :e 5, :f 6, :f# 7, :g 8, :g# 9, :a 10, :a# 11, :b 12})\n\n(def pitch-vals\n  {\&quot;+2\&quot; 0, \&quot;+\&quot; 1, \&quot;\&quot; 2, \&quot;-\&quot; 3, \&quot;-2\&quot; 4})\n\n(def pitch-map\n  {0 \&quot;+2\&quot;,1 \&quot;+\&quot;,2 \&quot;\&quot;,3 \&quot;-\&quot;,4 \&quot;-2\&quot;})\n\n(def major-scale\n  \&quot;Modify the mode accordingly\&quot;\n  [1 0 1 0 1 1 0 1 0 1 0 1])\n\n(defn rotate [v n]\n  (let [cv (count v), n (mod n cv)]\n    (concat (subvec v n cv) (subvec v 0 n))))\n\n(defn abs [n]\n  (if (&lt; n 0)\n    (* -1 n)\n    n))\n\n(defn carry-note [n]\n  (if (&lt; n 0) (+ n 13)\n    n))\n\n(defn carry-pitch [n]\n  (if (&lt; n 0) (+ n 5)\n              n))\n\n(defn map-key-sig [root]\n  \&quot;Rotate the major scale to fit the key\n  For reference: C is 0, C#/Db is 1, etc\&quot;\n  (let [position (- (note-vals-sans-r root) 1)]\n    (vec (remove nil? (map #(note-map-sans-r %1)\n                           (map #(* %1 %2) (rotate [1 2 3 4 5 6 7 8 9 10 11 12] position) major-scale))))))\n\n(def pitch-bag\n  '(\&quot;+2\&quot; \&quot;+\&quot; \&quot;+\&quot; \&quot;+\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;-\&quot; \&quot;-\&quot; \&quot;-\&quot; \&quot;-2\&quot;))\n\n(def length\n  '(\&quot;1/16\&quot; \&quot;1/8\&quot; \&quot;1/4\&quot; \&quot;1/2\&quot; \&quot;1\&quot;))\n\n(def smallest-value \&quot;1/\&quot; 8)\n\n(defn measure-template [num]\n  (sort (take num (repeatedly #(rand-int num)))))\n\n(defn generate-lengths [num]\n  (let [template (measure-template num)]\n    (mapv #(/ (second %1) num) (frequencies template))))\n\n(defn generate-notes [num]\n  (vec (take num (repeatedly #(rand-nth notes)))))\n\n(defn generate-pitch [num]\n  (vec (take num (repeatedly #(rand-nth pitch-bag)))))\n\n(defn translate-notes [length note pitch]\n  (str length \&quot; \&quot; pitch note \&quot; \&quot;))\n\n(def fitness-vals\n  {1/4 0, 1/8 0, 1/2 0, 1 0, 1/16 0, 3/8 0, 5/8 0,\n   \&quot;\&quot;  8, \&quot;-\&quot; 4, \&quot;+\&quot; 4, \&quot;-2\&quot; 2, \&quot;+2\&quot; 2,\n   })\n\n(defn trait-fitness [pitch]\n  (try\n    (reduce + (let [pitch-freq (frequencies pitch)]\n              (map (fn [x]\n                     (* (fitness-vals (first x)) (second x))) pitch-freq)))\n    (catch Exception e (do (println \&quot;Something went wrong.\&quot;) (System/exit 0)))))\n\n(def key-sig (map-key-sig what-key))\n\n(defn note-in-key [note]\n  (if (nil? (note-vals (some #{note} key-sig)))\n    4\n    10))\n\n(defn note-fitness [note]\n  (reduce + (map #(note-in-key %1) note)))\n\n(defn fitness [l n p]\n  (/ (+ (+ (note-fitness n) (trait-fitness l))\n        (trait-fitness p)) (count l)))\n\n(defn create-genome [l n p]\n  (mapv #(vector %1 %2 %3) l p n))\n\n(defn new-individual []\n  (let [l (generate-lengths 8)\n        n (generate-notes (count l))\n        p (generate-pitch (count l))]\n    {:genome      (create-genome l n p)\n     :lengths     l\n     :notes       n\n     :pitches     p\n     :final-notes (mapv #(translate-notes %1 %2 %3) l n p)\n     :fitness     (double (fitness l n p))}))\n\n(defn mutate-note [gene]\n  (if (&lt; (rand) 0.15) (assoc gene 2 (note-map (mod (carry-note (+ (rand-nth (range -2 3)) (note-vals (nth gene 2)))) 13)))\n                      gene))\n\n(defn mutate-length [gene]\n\n  gene)\n\n(def example-gene\n  [1/4 \&quot;\&quot; :d])\n\n(defn mutate-pitch [gene]\n  (if (&lt; (rand) 0.95) (assoc gene 1 (pitch-map (mod (carry-pitch (+ (rand-nth (range -1 2)) (pitch-vals (second gene)))) 5)))\n                      gene))\n\n(defn mutate [genome]\n  (let [chance (rand)]\n    (cond\n      (&gt;= chance 1) (map #(mutate-length %1) genome)\n      (&gt;= chance 0.5) (map #(mutate-pitch %1) genome)\n      (&gt;= chance 0) (map #(mutate-note %1) genome)\n      :else genome)))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&gt; (:fitness i1) (:fitness i2))\n              i1\n              i2))\n          individuals))\n\n(defn select [population]\n  \&quot;Returns an individual selected from population using a tournament.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn make-child [population]\n  (let [new-genome (mutate (:genome (select population)))\n        l (mapv #(first %1) new-genome)\n        n (mapv #(nth %1 2) new-genome)\n        p (mapv #(second %1) new-genome)]\n    {:genome new-genome\n     :lengths l\n     :notes n\n     :pitches p\n     :final-notes (mapv #(translate-notes %1 %2 %3) l n p)\n     :fitness (double (fitness l n p))}\n    ))\n\n(defn report [generation population]\n  (let [current-best (best population)]\n    (println {:generation generation\n              :best-fitness (:fitness current-best)\n              :best-genome (:genome current-best)})))\n\n(defn run [population-size generations]\n  (loop [population (repeatedly population-size #(new-individual))\n         generation 0]\n    (report generation population)\n    (if (&gt;= generation generations)\n      (best population)\n      (recur (repeatedly population-size #(make-child population))\n             (inc generation)))))\n\n#_(run 100 50)&quot;, :offset 5017, :ns &quot;musical-genius.core&quot;} {:command &quot;(print \&quot;hello\&quot;)&quot;, :offset 15, :ns &quot;musical-genius.core&quot;} {:command &quot;(connect-external-server 57110)&quot;, :offset 31, :ns &quot;musical-genius.core&quot;} {:command &quot;(use 'overtone.core)&quot;, :offset 20, :ns &quot;musical-genius.core&quot;} {:command &quot;(boot-external-server)&quot;, :offset 22, :ns &quot;musical-genius.core&quot;} {:command &quot;(definst foo [] (saw 220))&quot;, :offset 26, :ns &quot;musical-genius.core&quot;} {:command &quot;(food)&quot;, :offset 6, :ns &quot;musical-genius.core&quot;} {:command &quot;(foo)&quot;, :offset 5, :ns &quot;musical-genius.core&quot;} {:command &quot;(kill 4)&quot;, :offset 8, :ns &quot;musical-genius.core&quot;} {:command &quot;(def what-key\n  \&quot;Set the key of your music generator\&quot;\n  :c#)&quot;, :offset 60, :ns &quot;musical-genius.core&quot;} {:command &quot;(ns musical-genius.core\n  )\n\n(def what-key\n  \&quot;Set the key of your music generator\&quot;\n  :c#)\n\n(def tempo 100)\n\n(def instrument :piano)\n\n(def notes\n  '(:c :c# :d :d# :e :f :f# :g :g# :a :a# :b))\n\n(def note-map-sans-r\n  {1 :c, 2 :c#, 3 :d, 4 :d#, 5 :e, 6 :f, 7 :f#, 8 :g, 9 :g#, 10 :a, 11 :a#, 12 :b})\n\n(def note-map\n  {0 :r, 1 :c, 2 :c#, 3 :d, 4 :d#, 5 :e, 6 :f, 7 :f#, 8 :g, 9 :g#, 10 :a, 11 :a#, 12 :b})\n\n(def note-vals-sans-r\n  {:c 1, :c# 2, :d 3, :d# 4, :e 5, :f 6, :f# 7, :g 8, :g# 9, :a 10, :a# 11, :b 12})\n\n(def note-vals\n  {:r 0, :c 1, :c# 2, :d 3, :d# 4, :e 5, :f 6, :f# 7, :g 8, :g# 9, :a 10, :a# 11, :b 12})\n\n(def pitch-vals\n  {\&quot;+2\&quot; 0, \&quot;+\&quot; 1, \&quot;\&quot; 2, \&quot;-\&quot; 3, \&quot;-2\&quot; 4})\n\n(def pitch-map\n  {0 \&quot;+2\&quot;,1 \&quot;+\&quot;,2 \&quot;\&quot;,3 \&quot;-\&quot;,4 \&quot;-2\&quot;})\n\n(def major-scale\n  \&quot;Modify the mode accordingly\&quot;\n  [1 0 1 0 1 1 0 1 0 1 0 1])\n\n(defn rotate [v n]\n  (let [cv (count v), n (mod n cv)]\n    (concat (subvec v n cv) (subvec v 0 n))))\n\n(defn abs [n]\n  (if (&lt; n 0)\n    (* -1 n)\n    n))\n\n(defn carry-note [n]\n  (if (&lt; n 0) (+ n 13)\n    n))\n\n(defn carry-pitch [n]\n  (if (&lt; n 0) (+ n 5)\n              n))\n\n(defn map-key-sig [root]\n  \&quot;Rotate the major scale to fit the key\n  For reference: C is 0, C#/Db is 1, etc\&quot;\n  (let [position (- (note-vals-sans-r root) 1)]\n    (vec (remove nil? (map #(note-map-sans-r %1)\n                           (map #(* %1 %2) (rotate [1 2 3 4 5 6 7 8 9 10 11 12] position) major-scale))))))\n\n(def pitch-bag\n  '(\&quot;+2\&quot; \&quot;+\&quot; \&quot;+\&quot; \&quot;+\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;\&quot; \&quot;-\&quot; \&quot;-\&quot; \&quot;-\&quot; \&quot;-2\&quot;))\n\n(def length\n  '(\&quot;1/16\&quot; \&quot;1/8\&quot; \&quot;1/4\&quot; \&quot;1/2\&quot; \&quot;1\&quot;))\n\n(def smallest-value \&quot;1/\&quot; 8)\n\n(defn measure-template [num]\n  (sort (take num (repeatedly #(rand-int num)))))\n\n(defn generate-lengths [num]\n  (let [template (measure-template num)]\n    (mapv #(/ (second %1) num) (frequencies template))))\n\n(defn generate-notes [num]\n  (vec (take num (repeatedly #(rand-nth notes)))))\n\n(defn generate-pitch [num]\n  (vec (take num (repeatedly #(rand-nth pitch-bag)))))\n\n(defn translate-notes [length note pitch]\n  (str length \&quot; \&quot; pitch note \&quot; \&quot;))\n\n(def fitness-vals\n  {1/4 0, 1/8 0, 1/2 0, 1 0, 1/16 0, 3/8 0, 5/8 0,\n   \&quot;\&quot;  8, \&quot;-\&quot; 4, \&quot;+\&quot; 4, \&quot;-2\&quot; 2, \&quot;+2\&quot; 2,\n   })\n\n(defn trait-fitness [pitch]\n  (try\n    (reduce + (let [pitch-freq (frequencies pitch)]\n              (map (fn [x]\n                     (* (fitness-vals (first x)) (second x))) pitch-freq)))\n    (catch Exception e (do (println \&quot;Something went wrong. Please try again.\&quot;)))))\n\n(def key-sig (map-key-sig what-key))\n\n(defn note-in-key [note]\n  (if (nil? (note-vals (some #{note} key-sig)))\n    4\n    10))\n\n(defn note-fitness [note]\n  (reduce + (map #(note-in-key %1) note)))\n\n(defn fitness [l n p]\n  (/ (+ (+ (note-fitness n) (trait-fitness l))\n        (trait-fitness p)) (count l)))\n\n(defn create-genome [l n p]\n  (mapv #(vector %1 %2 %3) l p n))\n\n(defn new-individual []\n  (let [l (generate-lengths 8)\n        n (generate-notes (count l))\n        p (generate-pitch (count l))]\n    {:genome      (create-genome l n p)\n     :lengths     l\n     :notes       n\n     :pitches     p\n     :final-notes (mapv #(translate-notes %1 %2 %3) l n p)\n     :fitness     (double (fitness l n p))}))\n\n(defn mutate-note [gene]\n  (if (&lt; (rand) 0.15) (assoc gene 2 (note-map (mod (carry-note (+ (rand-nth (range -2 3)) (note-vals (nth gene 2)))) 13)))\n                      gene))\n\n(defn mutate-length [gene]\n\n  gene)\n\n(def example-gene\n  [1/4 \&quot;\&quot; :d])\n\n(defn mutate-pitch [gene]\n  (if (&lt; (rand) 0.95) (assoc gene 1 (pitch-map (mod (carry-pitch (+ (rand-nth (range -1 2)) (pitch-vals (second gene)))) 5)))\n                      gene))\n\n(defn mutate [genome]\n  (let [chance (rand)]\n    (cond\n      (&gt;= chance 1) (map #(mutate-length %1) genome)\n      (&gt;= chance 0.5) (map #(mutate-pitch %1) genome)\n      (&gt;= chance 0) (map #(mutate-note %1) genome)\n      :else genome)))\n\n(defn best [individuals]\n  \&quot;Returns the best of the given individuals.\&quot;\n  (reduce (fn [i1 i2]\n            (if (&gt; (:fitness i1) (:fitness i2))\n              i1\n              i2))\n          individuals))\n\n(defn select [population]\n  \&quot;Returns an individual selected from population using a tournament.\&quot;\n  (best (repeatedly 2 #(rand-nth population))))\n\n(defn make-child [population]\n  (let [new-genome (mutate (:genome (select population)))\n        l (mapv #(first %1) new-genome)\n        n (mapv #(nth %1 2) new-genome)\n        p (mapv #(second %1) new-genome)]\n    {:genome new-genome\n     :lengths l\n     :notes n\n     :pitches p\n     :final-notes (mapv #(translate-notes %1 %2 %3) l n p)\n     :fitness (double (fitness l n p))}\n    ))\n\n(defn report [generation population]\n  (let [current-best (best population)]\n    (println {:generation generation\n              :best-fitness (:fitness current-best)\n              :best-genome (:genome current-best)})))\n\n(defn run [population-size generations]\n  (loop [population (repeatedly population-size #(new-individual))\n         generation 0]\n    (report generation population)\n    (if (&gt;= generation generations)\n      (best population)\n      (recur (repeatedly population-size #(make-child population))\n             (inc generation)))))\n\n#_(run 100 50)&quot;, :offset 5064, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn mutate [genome]\n  (let [chance (rand)]\n    (cond\n      (&gt;= chance 1) (map #(mutate-length %1) genome)\n      (&gt;= chance 0.66) (map #(mutate-pitch %1) genome)\n      (&gt;= chance 0.33) (map #(mutate-note %1) genome)\n      :else genome)))&quot;, :offset 238, :ns &quot;musical-genius.core&quot;} {:command &quot;(run 100 50)&quot;, :offset 12, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n  (let [l (generate-lengths 10)\n        n (generate-notes (count l))\n        p (generate-pitch (count l))]\n    {:genome      (create-genome l n p)\n     :lengths     l\n     :notes       n\n     :pitches     p\n     :final-notes (mapv #(translate-notes %1 %2 %3) l n p)\n     :fitness     (double (fitness l n p))}))&quot;, :offset 335, :ns &quot;musical-genius.core&quot;} {:command &quot;(run 10 50)&quot;, :offset 11, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n  (let [l (generate-lengths 8)\n        n (generate-notes (count l))\n        p (generate-pitch (count l))]\n    {:genome      (create-genome l n p)\n     :lengths     l\n     :notes       n\n     :pitches     p\n     :final-notes (mapv #(translate-notes %1 %2 %3) l n p)\n     :fitness     (double (fitness l n p))}))&quot;, :offset 334, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-lengths 20)&quot;, :offset 21, :ns &quot;musical-genius.core&quot;} {:command &quot;(generate-lengths 8)&quot;, :offset 20, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn fitness [l n p]\n  (/ (+ \n       ;(+\n          (note-fitness n) ;(trait-fitness l))\n        (trait-fitness p)) (count l)))&quot;, :offset 127, :ns &quot;musical-genius.core&quot;} {:command &quot;(run 1 50)&quot;, :offset 10, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n  (let [l (generate-lengths 32)\n        n (generate-notes (count l))\n        p (generate-pitch (count l))]\n    {:genome      (create-genome l n p)\n     :lengths     l\n     :notes       n\n     :pitches     p\n     :final-notes (mapv #(translate-notes %1 %2 %3) l n p)\n     :fitness     (double (fitness l n p))}))&quot;, :offset 335, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n  (let [l (generate-lengths 16)\n        n (generate-notes (count l))\n        p (generate-pitch (count l))]\n    {:genome      (create-genome l n p)\n     :lengths     l\n     :notes       n\n     :pitches     p\n     :final-notes (mapv #(translate-notes %1 %2 %3) l n p)\n     :fitness     (double (fitness l n p))}))&quot;, :offset 335, :ns &quot;musical-genius.core&quot;} {:command &quot;(run 20 50)&quot;, :offset 11, :ns &quot;musical-genius.core&quot;} {:command &quot;(run 5 50)&quot;, :offset 10, :ns &quot;musical-genius.core&quot;} {:command &quot;(run 5 500)&quot;, :offset 11, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn mutate-pitch [gene]\n  (if (&lt; (rand) 0.15) (assoc gene 1 (pitch-map (mod (carry-pitch (+ (rand-nth (range -1 2)) (pitch-vals (second gene)))) 5)))\n                      gene))&quot;, :offset 180, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn mutate-pitch [gene]\n  (if (&lt; (rand) 0.05) (assoc gene 1 (pitch-map (mod (carry-pitch (+ (rand-nth (range -1 2)) (pitch-vals (second gene)))) 5)))\n                      gene))&quot;, :offset 180, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn mutate-note [gene]\n  (if (&lt; (rand) 0.05) (assoc gene 2 (note-map (mod (carry-note (+ (rand-nth (range -2 3)) (note-vals (nth gene 2)))) 13)))\n                      gene))&quot;, :offset 176, :ns &quot;musical-genius.core&quot;} {:command &quot;(defn new-individual []\n  (let [l (generate-lengths 100)\n        n (generate-notes (count l))\n        p (generate-pitch (count l))]\n    {:genome      (create-genome l n p)\n     :lengths     l\n     :notes       n\n     :pitches     p\n     :final-notes (mapv #(translate-notes %1 %2 %3) l n p)\n     :fitness     (double (fitness l n p))}))&quot;, :offset 336, :ns &quot;musical-genius.core&quot;} {:command &quot;(run 50 50)&quot;, :offset 11, :ns &quot;musical-genius.core&quot;} {:command &quot;(run 50 500)&quot;, :offset 12, :ns &quot;musical-genius.core&quot;} {:command &quot;(run 100 500)&quot;, :offset 13, :ns &quot;musical-genius.core&quot;} {:command &quot;(run 100 50000)&quot;, :offset 15, :ns &quot;musical-genius.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="REPL for musical-genius" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false" temporary="true">
      <module name="musical-genius" />
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local" activateToolWindowBeforeRun="false">
      <setting name="replType" value="NREPL" />
      <setting name="execution" value="LEININGEN" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="" />
      <setting name="profiles" value="" />
      <setting name="aliases" value="" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Remote" activateToolWindowBeforeRun="false">
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="SOCKET" />
      <setting name="configType" value="SPECIFY" />
      <setting name="fixLineNumbers" value="false" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure REPL.REPL for musical-genius" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="a31e9ceb-39ba-4bd1-ba42-10d5194626ac" name="Default Changelist" comment="" />
      <created>1590735821707</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1590735821707</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-6" y="-6" width="1549" height="837" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.24949698" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Image Layers" order="2" />
      <window_info id="Designer" order="3" />
      <window_info id="UI Designer" order="4" />
      <window_info id="Capture Tool" order="5" />
      <window_info id="Favorites" order="6" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Terminal" order="7" sideWeight="0.49899396" visible="true" weight="0.32673267" />
      <window_info anchor="bottom" id="Event Log" order="8" sideWeight="0.501006" side_tool="true" weight="0.32673267" />
      <window_info anchor="bottom" id="Version Control" order="9" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="right" id="Maven" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info anchor="right" x="4704" y="393" width="951" height="473" id="REPL" order="6" side_tool="true" type="WINDOWED" weight="0.35278335" />
      <window_info anchor="right" id="Leiningen" order="7" />
      <window_info anchor="right" id="Capture Analysis" order="8" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
    </layout>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="85">
          <caret line="5" column="47" selection-start-line="5" selection-start-column="47" selection-end-line="5" selection-end-column="47" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/musical_genius/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="349">
          <caret line="189" column="16" selection-start-line="189" selection-start-column="16" selection-end-line="189" selection-end-column="16" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>12</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>musical-genius</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>12</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clojure-complete:0.2.5</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>